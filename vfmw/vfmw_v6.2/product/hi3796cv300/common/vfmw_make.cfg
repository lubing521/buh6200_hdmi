################################################################################################
# purpose:
#    This file provide two vars: VFMW_FLAG, VFMW_INC, VFMW_OBJ
#    VFMW_CFLAGS     --- compile options for vfmw
#    VFMW_INC      --- include headers for vfmw
#    VFMW_OBJ      --- specify the files to be compiled
###############################################################################################

CHIP_VER := hi3796cv300

VFMW_CFLAGS ?=
VFMW_CORE_SRC ?=

include $(VFMW_INC_DIR)/product/$(CHIP_VER)/common/vfmw_config.cfg

VFMW_CFLAGS += -DSCD_MP4_SLICE_ENABLE
VFMW_CFLAGS += -DPRODUCT_STB
VFMW_CFLAGS += -DRAW_MEM_LESS
VFMW_CFLAGS += -DIP_UNID_SUPPORT
VFMW_CFLAGS += -DIP_CANCEL_SUPPORT
VFMW_CFLAGS += -DCHIP_TYPE_HI3796CV300
VFMW_CFLAGS += -DVDH_V5R7B5_ESCHIP
VFMW_CFLAGS += -DMEM_REFCNT_SUPPORT

ifeq ($(VFMW_MAILBOX_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_MAILBOX_SUPPORT
endif

ifeq ($(VFMW_SCD_SUPPORT),y)
SCD_VER := v3r3
endif

ifeq ($(VFMW_VDH_SUPPORT),y)
VFMW_CFLAGS += -DVDH_DEC_SUPPORT
VDH_VER := v5r7b5
endif

ifeq ($(VFMW_BPD_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_BPD_SUPPORT
BPD_VER := v2r1
endif

ifeq ($(VFMW_VMM_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_VMM_SUPPORT
endif

ifeq ($(VFMW_FENCE_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_FENCE_SUPPORT
endif

ifeq ($(VFMW_DPRINT_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_DPRINT_SUPPORT
endif

ifeq ($(VFMW_MODULE_LOWDLY_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_MODULE_LOWDLY_SUPPORT
endif

##############  timeout config ###########
ifeq ($(VFMW_SYSTEM_TIME_OUT),y)
VFMW_CFLAGS += -DSCD_TIME_OUT=$(VFMW_SCD_TIME_OUT)
VFMW_CFLAGS += -DVDH_TIME_OUT=$(VFMW_VDH_TIME_OUT)
endif
##########################################

ifeq ($(VFMW_CHAN_SUPPORT),y)
VFMW_CFLAGS += -DCFG_MAX_CHAN_NUM=$(VFMW_MAX_CHAN_NUM)
endif

VFMW_CFLAGS += -DMAX_DPS_NUM=$(VFMW_MAX_DPS_NUM)

VFMW_CFLAGS += -DOLD_MIN_PIX_WIDTH=$(VFMW_OLD_MIN_PIX_WIDTH)
VFMW_CFLAGS += -DOLD_MIN_PIX_HEIGHT=$(VFMW_OLD_MIN_PIX_HEIGHT)
VFMW_CFLAGS += -DOLD_MAX_PIX_WIDTH=$(VFMW_OLD_MAX_PIX_WIDTH)
VFMW_CFLAGS += -DOLD_MAX_PIX_HEIGHT=$(VFMW_OLD_MAX_PIX_HEIGHT)

################# PVR EXTRA FRAME CFG ##############################
VFMW_CFLAGS += -DVFMW_FSP_MAX_FRAME_NUM=$(VFMW_FSP_MAX_FRAME_NUM)
VFMW_CFLAGS += -DVFMW_EXTRA_PVR_FRAME_NUM=$(VFMW_EXTRA_PVR_FRAME_NUM)

ifeq ($(VFMW_PROC_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_PROC_SUPPORT
endif

ifeq ($(VFMW_HDR_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_HDR_SUPPORT

ifeq ($(VFMW_DOLBY_VISION_HDR_SUPPORT),y)
VFMW_CFLAGS += -DDOLBY_VISION_HDR_SUPPORT
VFMW_CFLAGS += -DHIGH_PROFILE_MAX_BITSTREAM_SIZE=$(VFMW_HIGH_PROFILE_MAX_BITSTREAM_SIZE)
VFMW_CFLAGS += -DMAIN_PROFILE_MAX_BITSTREAM_SIZE=$(VFMW_MAIN_PROFILE_MAX_BITSTREAM_SIZE)
VFMW_CFLAGS += -DBASE_PROFILE_MAX_BITSTREAM_SIZE=$(VFMW_BASE_PROFILE_MAX_BITSTREAM_SIZE)
endif

endif

#===============================================================================
#   std define
#===============================================================================
ifeq ($(VFMW_H264_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_H264_SUPPORT
VFMW_CFLAGS += -DH264_MIN_PIX_WIDTH=$(VFMW_H264_MIN_PIX_WIDTH)
VFMW_CFLAGS += -DH264_MIN_PIX_HEIGHT=$(VFMW_H264_MIN_PIX_HEIGHT)
VFMW_CFLAGS += -DH264_MAX_PIX_WIDTH=$(VFMW_H264_MAX_PIX_WIDTH)
VFMW_CFLAGS += -DH264_MAX_PIX_HEIGHT=$(VFMW_H264_MAX_PIX_HEIGHT)
VFMW_CFLAGS += -DH264_MAX_SLICE_NUM=$(VFMW_H264_MAX_SLICE_NUM)
ifeq ($(VFMW_H264_SLC_LDY_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_H264_SLC_LDY_SUPPORT
endif
endif

ifeq ($(VFMW_HEVC_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_HEVC_SUPPORT
VFMW_CFLAGS += -DHEVC_MIN_PIX_WIDTH=$(VFMW_HEVC_MIN_PIX_WIDTH)
VFMW_CFLAGS += -DHEVC_MIN_PIX_HEIGHT=$(VFMW_HEVC_MIN_PIX_HEIGHT)
VFMW_CFLAGS += -DHEVC_MAX_PIX_WIDTH=$(VFMW_HEVC_MAX_PIX_WIDTH)
VFMW_CFLAGS += -DHEVC_MAX_PIX_HEIGHT=$(VFMW_HEVC_MAX_PIX_HEIGHT)
VFMW_CFLAGS += -DHEVC_MAX_SLICE_NUM=$(VFMW_HEVC_MAX_SLICE_NUM)
VFMW_CFLAGS += -DHEVC_MAX_BIT_DEPTH=$(VFMW_HEVC_MAX_BIT_DEPTH)
ifeq ($(VFMW_HEVC_SLC_LDY_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_HEVC_SLC_LDY_SUPPORT
endif
endif

ifeq ($(VFMW_VP9_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_VP9_SUPPORT
VFMW_CFLAGS += -DVP9_MIN_PIX_WIDTH=$(VFMW_VP9_MIN_PIX_WIDTH)
VFMW_CFLAGS += -DVP9_MIN_PIX_HEIGHT=$(VFMW_VP9_MIN_PIX_HEIGHT)
VFMW_CFLAGS += -DVP9_MAX_PIX_WIDTH=$(VFMW_VP9_MAX_PIX_WIDTH)
VFMW_CFLAGS += -DVP9_MAX_PIX_HEIGHT=$(VFMW_VP9_MAX_PIX_HEIGHT)
endif

ifeq ($(VFMW_AVS2_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_AVS2_SUPPORT
ifeq ($(VFMW_AVS2_SLHDR_SUPPORT),y)
VFMW_CFLAGS += -DAVS2_SLHDR_SUPPORT
endif
VFMW_CFLAGS += -DAVS2_MIN_PIX_WIDTH=$(VFMW_AVS2_MIN_PIX_WIDTH)
VFMW_CFLAGS += -DAVS2_MIN_PIX_HEIGHT=$(VFMW_AVS2_MIN_PIX_HEIGHT)
VFMW_CFLAGS += -DAVS2_MAX_PIX_WIDTH=$(VFMW_AVS2_MAX_PIX_WIDTH)
VFMW_CFLAGS += -DAVS2_MAX_PIX_HEIGHT=$(VFMW_AVS2_MAX_PIX_HEIGHT)
endif

ifeq ($(VFMW_AVS3_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_AVS3_SUPPORT
ifeq ($(VFMW_AVS3_SLHDR_SUPPORT),y)
VFMW_CFLAGS += -DAVS3_SLHDR_SUPPORT
endif
VFMW_CFLAGS += -DAVS3_MIN_PIX_WIDTH=$(VFMW_AVS3_MIN_PIX_WIDTH)
VFMW_CFLAGS += -DAVS3_MIN_PIX_HEIGHT=$(VFMW_AVS3_MIN_PIX_HEIGHT)
VFMW_CFLAGS += -DAVS3_MAX_PIX_WIDTH=$(VFMW_AVS3_MAX_PIX_WIDTH)
VFMW_CFLAGS += -DAVS3_MAX_PIX_HEIGHT=$(VFMW_AVS3_MAX_PIX_HEIGHT)
endif

ifeq ($(VFMW_AV1_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_AV1_SUPPORT
VFMW_CFLAGS += -DAV1_MIN_PIX_WIDTH=$(VFMW_AV1_MIN_PIX_WIDTH)
VFMW_CFLAGS += -DAV1_MIN_PIX_HEIGHT=$(VFMW_AV1_MIN_PIX_HEIGHT)
VFMW_CFLAGS += -DAV1_MAX_PIX_WIDTH=$(VFMW_AV1_MAX_PIX_WIDTH)
VFMW_CFLAGS += -DAV1_MAX_PIX_HEIGHT=$(VFMW_AV1_MAX_PIX_HEIGHT)
endif

ifeq ($(VFMW_MPEG2_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_MPEG2_SUPPORT
ifeq ($(MPEG2_SLCHDR_HW),y)
VFMW_CFLAGS += -DMPEG2_SLCHDR_HW
endif
endif

ifeq ($(VFMW_MPEG4_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_MPEG4_SUPPORT
endif

ifeq ($(VFMW_H263_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_H263_SUPPORT
endif

ifeq ($(VFMW_SORENSON_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_SORENSON_SUPPORT
endif

ifeq ($(VFMW_AVS_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_AVS_SUPPORT
ifeq ($(VFMW_AVSPLUS_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_AVSPLUS_SUPPORT
endif
endif

ifeq ($(VFMW_VC1_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_VC1_SUPPORT
endif

ifeq ($(VFMW_VP6_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_VP6_SUPPORT
endif

ifeq ($(VFMW_VP8_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_VP8_SUPPORT
endif

ifeq ($(VFMW_REAL8_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_REAL8_SUPPORT
endif

ifeq ($(VFMW_REAL9_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_REAL9_SUPPORT
endif

ifeq ($(VFMW_MVC_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_MVC_SUPPORT
endif

ifeq ($(VFMW_WMV1_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_WMV1_SUPPORT
endif

ifeq ($(VFMW_WMV2_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_WMV2_SUPPORT
endif

ifeq ($(VFMW_WMV3_SUPPORT),y)
VFMW_CFLAGS += -DVFMW_WMV3_SUPPORT
endif

#===============================================================================
#   include path
#===============================================================================
VFMW_CFLAGS += -I$(VFMW_INC_DIR)
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/include
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/common
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/stream
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/stream/hal/$(SCD_VER)
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/syntax
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/syntax/protocol
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/syntax/hal/$(BPD_VER)
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/decode
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/decode/hal/$(VDH_VER)
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/core/dps

VFMW_CFLAGS += -I$(VFMW_INC_DIR)/osal
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/product
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/product/$(CHIP_VER)

ifeq ($(VFMW_MVC_SUPPORT), y)
VFMW_CFLAGS += -I$(VFMW_INC_DIR)/master/module/mvc_img
endif

#===============================================================================
#   vfmw_obj_list
#===============================================================================
export CORE_DIR = $(VFMW_SRC_DIR)/core
export DPS_DIR = $(CORE_DIR)/dps
export STM_DIR = $(CORE_DIR)/stream
export SYN_DIR = $(CORE_DIR)/syntax
export DEC_DIR = $(CORE_DIR)/decode
export STD_DIR = $(CORE_DIR)/syntax/protocol
export SCD_DIR = $(CORE_DIR)/stream/hal/$(SCD_VER)
export BPD_DIR = $(CORE_DIR)/syntax/hal/$(BPD_VER)
export VDH_DIR = $(CORE_DIR)/decode/hal/$(VDH_VER)
export MST_DIR = $(VFMW_SRC_DIR)/master
export SLV_DIR = $(VFMW_SRC_DIR)/slave
export OSL_DIR = $(VFMW_SRC_DIR)/osal
export PDT_DIR = $(VFMW_SRC_DIR)/product/$(CHIP_VER)

#common
VFMW_SRC += $(OSL_DIR)/vfmw_osal.c
VFMW_SRC += $(CORE_DIR)/common/dbg.c
ifeq ($(VFMW_MVC_SUPPORT),y)
VFMW_SRC += $(MST_DIR)/module/mvc_img/mvc_img.c
endif

#core/common
VFMW_CORE_SRC += $(CORE_DIR)/common/event.c
VFMW_CORE_SRC += $(CORE_DIR)/common/fsp.c
VFMW_CORE_SRC += $(CORE_DIR)/common/usrdata.c
VFMW_CORE_SRC += $(CORE_DIR)/common/vctrl.c

#core/stream
VFMW_CORE_SRC += $(STM_DIR)/stm_intf.c
VFMW_CORE_SRC += $(STM_DIR)/stm_ctrl.c
VFMW_CORE_SRC += $(STM_DIR)/stm_dev.c
VFMW_CORE_SRC += $(STM_DIR)/stm_thread.c
VFMW_CORE_SRC += $(STM_DIR)/stm_chan.c
VFMW_CORE_SRC += $(STM_DIR)/stm_raw.c
VFMW_CORE_SRC += $(STM_DIR)/stm_seg.c
VFMW_CORE_SRC += $(SCD_DIR)/scd_hal.c

#core/syntax
VFMW_CORE_SRC += $(SYN_DIR)/syn_intf.c
VFMW_CORE_SRC += $(SYN_DIR)/syn_ctrl.c
VFMW_CORE_SRC += $(SYN_DIR)/syn_parse.c
VFMW_CORE_SRC += $(SYN_DIR)/syn_ops.c
ifeq ($(VFMW_BSA_SUPPORT), y)
VFMW_CORE_SRC += $(STD_DIR)/bsa.c
else
VFMW_CORE_SRC += $(STD_DIR)/syn_bs.c
endif

#core/decode
VFMW_CORE_SRC += $(DEC_DIR)/dec_intf.c
VFMW_CORE_SRC += $(DEC_DIR)/dec_ctrl.c
VFMW_CORE_SRC += $(DEC_DIR)/dec_thread.c
VFMW_CORE_SRC += $(DEC_DIR)/dec_chn.c
VFMW_CORE_SRC += $(DEC_DIR)/dec_dev.c
VFMW_CORE_SRC += $(DEC_DIR)/dec_ref.c
VFMW_CORE_SRC += $(DEC_DIR)/dec_post.c
VFMW_CORE_SRC += $(VDH_DIR)/dec_hal.c
VFMW_CORE_SRC += $(VDH_DIR)/mdma_hal.c

#dps module
VFMW_CORE_SRC += $(DPS_DIR)/dps.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_ops.c

#proc
ifeq ($(VFMW_PROC_SUPPORT),y)
VFMW_CORE_SRC +=  $(CORE_DIR)/common/fsp_log.c
VFMW_CORE_SRC +=  $(CORE_DIR)/common/vctrl_log.c
VFMW_CORE_SRC += $(STM_DIR)/stm_log.c
VFMW_CORE_SRC += $(SYN_DIR)/syn_log.c
VFMW_CORE_SRC += $(DEC_DIR)/dec_log.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_log.c
endif

#std files
ifeq ($(VFMW_H264_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/h264.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_h264.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_h264.c
endif

ifeq ($(VFMW_HEVC_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/hevc.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_h265.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_h265.c
endif

ifeq ($(VFMW_VP9_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/vp9.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_vp9.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_vp9.c
endif

ifeq ($(VFMW_AVS2_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/avs2.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_avs2.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_avs2.c
endif

ifeq ($(VFMW_AVS3_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/avs3.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_avs3.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_avs3.c
endif

ifeq ($(VFMW_AV1_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/av1.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_av1.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_av1.c
endif

ifeq ($(VFMW_MPEG2_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/mpeg2.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_mpeg2.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_mpeg2.c
endif

ifeq ($(VFMW_MPEG4_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/mpeg4.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_mpeg4.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_mpeg4.c
endif

ifeq ($(VFMW_AVS_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/avs.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_avs.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_avs.c
endif

ifeq ($(VFMW_VC1_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/vc1.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_vc1.c
VFMW_CORE_SRC += $(BPD_DIR)/syn_bp.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_vc1.c
endif

ifeq ($(VFMW_VP6_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/vp6.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_vp6.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_vp6.c
endif

ifeq ($(VFMW_VP8_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/vp8.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_vp8.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_vp8.c
endif

ifeq ($(VFMW_REAL8_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/real8.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_real8.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_real8.c
endif

ifeq ($(VFMW_REAL9_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/real9.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_real9.c
VFMW_CORE_SRC += $(VDH_DIR)/vdh_real9.c
endif

ifeq ($(VFMW_MVC_SUPPORT),y)
VFMW_CORE_SRC += $(STD_DIR)/mvc.c
VFMW_CORE_SRC += $(DPS_DIR)/dps_mvc.c
endif
